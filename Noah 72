import cvzone
import cv2
import os
import math
from cvzone.HandTrackingModule import HandDetector
from cvzone.FaceMeshModule import FaceMeshDetector

try:
    cap = cv2.VideoCapture(0)
    cap.set(3, 1280)
    cap.set(4, 720)
    filterImages =[]
    path = "images"
    pathList = os.listdir(path)

    for pathImg in pathList:
        img = (cv2.imread(path+"/"+pathImg, cv2.IMREAD_UNCHANGED))
        filterImages.append(img)

    detector = HandDetector(detectionCon=0.8)

   
    faceImages = []
    path = "Images/"
    pathList = os.listdir(path)
    pathList.sort()

except Exception as e:
    print(e)
    
   
while True:
    try:
        success, cameraFeedImg = cap.read()
        
        cameraFeedImg= cv2.resize(cameraFeedImg, (640, 480))
        cameraFeedImg = cv2.flip(cameraFeedImg, 1)

        wHeight, wWidth, wChannel = cameraFeedImg.shape
        for x, pathImg in enumerate(pathList):
            img = (cv2.imread(path+"/"+pathImg, cv2.IMREAD_UNCHANGED))
            img = cv2.resize(img, (100, 100))
            faceImages.append(img)

            detector = HandDetector(detectionCon=0.8)
            detector = HandDetector(detectionCon=0.8)

        def showObjectOnface(backImg, frontImg, xLoc, yLoc, dist, rf, rx, ry):
            resizefactor = dist/rf\
            frontImg = cv2.resize(frontImg, (0, 0), fx=resizefactor, fy=resizefactor)

            backImg = cvzone.overlayPNG(backImg, frontImg, [int(
        xLoc - (resizefactor*rx)), int(yLoc - (resizefactor * ry))])
            return backImg   
        lipOpenDistance = math.dist(face[13], face[14])
        lipEndDistance = math.dist(face[76], face[306])

            
    except Exception as e:
        print("Exception", e) 

    cv2.imshow("Image", cameraFeedImg)
    cv2.waitKey(1)